<section class="container login flex justify-center py-24">
  <div class="w-full">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
      <div class="grid grid-cols-1 md:grid-cols-2">
        <div class="flex flex-col items-center justify-center">
          <img
            title="Click to change photo."
            id="product-img"
            src="/images/products/<%= productObject ? productObject.image : 'order.png' %>"
            alt="profile-img"
            style="
              cursor: pointer;
              width: 250px;
              height: 250px;
              border-radius: 50%;
              box-shadow: 0 0 10px 1px #ccc;
            "
          />
          <div id="msg-section" class="text-red-500 text-sm my-6">
            <%= messages.error %>
          </div>
        </div>
        <div id="overlay" style="display: none">
          <div
            id="image-upload-panel"
            class="w-full max-w-2xl rounded-md flex flex-col items-center justify-center"
          >
            <label class="text-2xl font-bold">Upload Image</label>
            <div
              class="bg-gray-200 shadow-inner rounded-md w-full my-6 cursor-pointer"
            >
              <div
                id="upload-container"
                class="flex flex-col items-center w-full h-full"
              >
                <img
                  src="/img/upload-img.png"
                  alt="upload-img"
                  class="w-1/2 h-1/2 object-contain"
                />
                <label for="panelFileInput" class="mb-4 cursor-pointer">
                  Drag and drop an image or click here to select an image:
                  <input
                    type="file"
                    style="display: none"
                    id="panelFileInput"
                    accept="image/*"
                  />
                </label>
              </div>
              <div
                id="preview"
                class="flex flex-col items-center w-full h-full"
              ></div>
            </div>
            <div class="w-full flex justify-end">
              <button
                id="cancelBtn"
                class="btn rounded-full text-white font-bold py-2 px-4 mx-3 rounded focus:outline-none focus:shadow-outline"
                type="button"
              >
                Cancel
              </button>
              <button
                id="confirmBtn"
                class="btn rounded-full text-white font-bold py-2 px-4 mx-3 rounded focus:outline-none focus:shadow-outline"
                type="button"
              >
                Confirm
              </button>
            </div>
            <div id="croppedImageContainer" class="hidden">
              <!-- Cropped image will be displayed here -->
            </div>
          </div>
        </div>
        <div>
          <% console.log(productObject) %> <% if(productObject) { %>
          <div class="mb-4">
            <label
              class="block text-gray-700 text-sm font-bold mb-2"
              for="product-id"
            >
              Product ID
            </label>
            <input
              readonly
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="product-id"
              name="product-id"
              value="<%= productObject._id %>"
            />
          </div>
          <% } %>

          <div class="mb-4">
            <label
              class="block text-gray-700 text-sm font-bold mb-2"
              for="name"
            >
              Name
            </label>
            <input
              type="text"
              placeholder="Enter Name"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="name"
              name="name"
              value="<%= productObject ? productObject.name : '' %>"
              required
            />
          </div>
          <div class="mb-4">
            <label
              class="block text-gray-700 text-sm font-bold mb-2"
              for="price"
            >
              Price
            </label>
            <input
              type="number"
              placeholder="Enter Price"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="price"
              name="price"
              value="<%= productObject ? productObject.price : '' %>"
              required
            />
          </div>
          <div class="mb-4">
            <label
              class="block text-gray-700 text-sm font-bold mb-2"
              for="category"
            >
              Category
            </label>
            <input
              type="category"
              placeholder="Enter Category"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="category"
              name="category"
              value="<%= productObject ? productObject.category : '' %>"
              required
            />
          </div>
          <div class="mb-4">
            <label
              class="block text-gray-700 text-sm font-bold mb-2"
              for="type"
            >
              Type
            </label>
            <input
              type="text"
              placeholder="Enter Type"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="type"
              name="type"
              value="<%= productObject ? productObject.type : '' %>"
              required
            />
          </div>
        </div>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="tags">
          Tags
          <span class="mx-3 text-xs font-normal text-gray-400"
            >(Enter the tags in comma separeted format.)</span
          >
        </label>
        <!-- Use textarea instead of input for tags -->

        <% let tags=""; if(productObject && productObject.tag){
        productObject.tag.forEach((singleTag)=>{ tags = tags + singleTag + ", "
        ; }) } %>

        <textarea
          id="tags"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline resize-none"
          placeholder="Enter the tags"
        >
  <%= productObject ? tags : "" %></textarea
        >
      </div>
      <div class="mb-4">
        <label
          class="block text-gray-700 text-sm font-bold mb-2"
          for="discription"
        >
          Discription
        </label>
        <!-- Use textarea instead of input for discription -->
        <textarea
          id="description"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline resize-none"
          placeholder="Enter the discription"
        >
  <%= productObject ? productObject.description : "" %></textarea
        >
      </div>

      <% if(productObject){ %>
      <div class="flex items-center justify-between">
        <a href="/admin/deleteproduct/<%= productObject._id %>">
          <button
            type="button"
            class="btn rounded-full text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            Delete
          </button>
        </a>
        <button
          id="addBtn"
          class="btn rounded-full text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="button"
        >
          Update
        </button>
      </div>
      <% } else { %>
      <div class="flex items-center justify-end">
        <button
          id="addBtn"
          class="btn rounded-full text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="button"
        >
          Add
        </button>
      </div>
      <% } %>
    </div>
  </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<!-- Include jQuery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
/>
<script>
  // Get elements
  const productImage = document.getElementById("product-img");
  const panel = document.getElementById("image-upload-panel");
  const overlay = document.getElementById("overlay");
  const panelFileInput = document.getElementById("panelFileInput");
  const uploadContainer = document.getElementById("upload-container");
  const msgSection = document.getElementById("msg-section");
  const preview = document.getElementById("preview");
  let image_name = productImage.src.split("/").pop();
  console.log("imgName ",image_name)
  let flag = false;
  let cropper;

  // Add button fuctionality
  document.getElementById("addBtn").addEventListener("click", async () => {
    const name = document.getElementById("name").value.trim();
    const price = document.getElementById("price").value.trim();
    const category = document.getElementById("category").value.trim();
    const type = document.getElementById("type").value.trim();
    const tags = document.getElementById("tags").value;
    const description = document.getElementById("description").value.trim();
    const productDiv = document.getElementById("product-id");
    const product_id = productDiv ? productDiv.value : "";

    let newTag = tags.split(",");

    for (let index = 0; index < newTag.length; index++) {
      newTag[index] = newTag[index].trim();
    }

    if (!name || !price || !category || !type || !newTag || !description) {
      alert("Fill all the fields to proceed.");
    } else {
      if (product_id !== "") {
        // If ID exists, make a PATCH request
        try {
          const response = await axios.patch(`/admin/product/${product_id}`, {
            image_name: flag ? image_name : null,
            name,
            price,
            category,
            type,
            tag: newTag,
            description,
          });
          console.log("Patch Request Successful.");
        } catch (error) {
          console.error("Error making PATCH request:", error);
        }
      } else {
        // If ID doesn't exist, make a POST request
        try {
          const response = await axios.post("/admin/product", {
            image_name: flag ? image_name : null,
            name,
            price,
            category,
            type,
            tag: newTag,
            description,
          });
          console.log("POST Request Successful");
          console.log(response.data);
          // product_id = response.data.product_id;
        } catch (error) {
          console.error("Error making POST request:", error);
        }
      }
    }
  });

  // Show panel when productImage is clicked
  productImage.addEventListener("click", function () {
    overlay.style.display = "block";
    uploadContainer.classList.remove("hidden");
    preview.classList.add("hidden");
  });

  uploadContainer.addEventListener("click", function () {
    document.getElementById("panelFileInput").click();
  });

  // Hide panel when clicking outside of it
  document.addEventListener("click", function (event) {
    if (!panel.contains(event.target) && !productImage.contains(event.target)) {
      overlay.style.display = "none";
      panelFileInput.value = "";
      preview.innerHTML = "";
    }
  });

  // Handle file selection
  panelFileInput.addEventListener("change", function (event) {
    const file = event.target.files[0];
    if (file && file.size <= 500 * 1024) {
      const reader = new FileReader();
      reader.onload = function (e) {
        // const blob = new Blob([e.target.result], { type: file.type });
        const image = new Image();
        image.src = URL.createObjectURL(
          new Blob([e.target.result], { type: file.type })
        );
        image.onload = function () {
          cropper = new Cropper(image, {
            aspectRatio: 1 / 1, // Set the aspect ratio of the crop box
            viewMode: 2, // Set the view mode to restrict the size of the crop box
          });
        };
        uploadContainer.classList.add("hidden");
        preview.classList.remove("hidden");
        preview.appendChild(image);
      };
      reader.readAsArrayBuffer(file);
    } else {
      alert("Please select an image less than 500KB.");
      panelFileInput.value = "";
    }
  });

  // Prevent default behavior for drag-and-drop events
  document.addEventListener("dragover", function (e) {
    e.preventDefault();
  });
  document.addEventListener("drop", function (e) {
    e.preventDefault();
  });

  document
    .getElementById("confirmBtn")
    .addEventListener("click", async function () {
      // Create an image element for the cropped image
      if (cropper && panelFileInput.value) {
        // Hide the cropper and show the cropped image
        overlay.style.display = "none";
        panelFileInput.value = "";
        preview.innerHTML = "";

        try {
          msgSection.innerHTML = ` Uploading... <span><progress id="progressBar" value="0" max="100"></progress></span> <span id="percentage">0 %</span><span id="uploadCancelBtn"><img src="/img/cross.png"></span>`;

          const addBtn = document.getElementById("addBtn");
          const progressBar = document.getElementById("progressBar");
          const percentageSpan = document.getElementById("percentage");
          const cancelBtn = document.getElementById("uploadCancelBtn");
          let uploadCancelToken = axios.CancelToken.source();

          addBtn.classList.add("disabled");
          addBtn.classList.remove("btn");
          addBtn.disabled = true;

          cancelBtn.addEventListener("click", () => {
            uploadCancelToken.cancel("Upload canceled by user");
            msgSectioninnerHTML = "";
            throw new Error({ message: "Upload Cancelled." });
          });

          const blob = await new Promise((resolve, reject) => {
            cropper.getCroppedCanvas().toBlob((blob) => {
              resolve(blob);
            });
          });
          productImage.src = await URL.createObjectURL(blob);

          // const imgBlob = productImage.src;
          const formData = new FormData();
          formData.append("image", blob, image_name);
          formData.append("name", "hero");

          const response = await axios.post(
            `/admin/upload-product-img`,
            formData,
            {
              headers: {
                "Content-Type": "multipart/form-data",
              },
              // Configuring axios to listen to upload progress
              onUploadProgress: (progressEvent) => {
                const progress = Math.round(
                  (progressEvent.loaded / progressEvent.total) * 100
                );
                // Update the progress bar
                progressBar.value = progress;
                percentageSpan.innerText = `${progress} %`;
              },
              cancelToken: uploadCancelToken.token,
            }
          );
          console.log("image uploaded successfully.");
          image_name = response.data.image_name;
          flag = true;

          console.log("flag ",flag)
          console.log(image_name)

          // cropper.destroy();
          addBtn.classList.remove("disabled");
          addBtn.classList.add("btn");
          addBtn.disabled = false;
          msgSection.innerHTML = "";
        } catch (error) {
          if (axios.isCancel(error)) {
            // Handle cancelation
            console.log("Upload canceled by user");
            // parse error message and show it in msg-section
            msgSection.innerHTML = error.message;
            addBtn.classList.remove("disabled");
            addBtn.classList.add("btn");
            addBtn.disabled = false;
          } else {
            // Handle other errors
            console.error("Error:", error.message);
            // parse error message and show it in msg-section
            msgSection.innerHTML = "Failed to upload Image.";
            addBtn.classList.remove("disabled");
            addBtn.classList.add("btn");
            addBtn.disabled = false;
          }
        }
      } else {
        alert("Please select a image.");
      }
    });

  document.getElementById("cancelBtn").addEventListener("click", () => {
    overlay.style.display = "none";
    panelFileInput.value = "";
    preview.innerHTML = "";
  });
</script>
