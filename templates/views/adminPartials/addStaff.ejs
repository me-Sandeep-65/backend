<section class="login flex justify-center py-24">
  <div class="w-full max-w-2xl">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
      <div class="flex flex-col items-center justify-center">
        <img
          title="Click to change photo."
          id="profile-img"
          src="/images/profiles/staffs/<%= staffObject && staffObject.image ? staffObject.image : 'profile.png' %>"
          alt="profile-img"
          style="
            cursor: pointer;
            width: 250px;
            height: 250px;
            border-radius: 50%;
            box-shadow: 0 0 10px 1px #ccc;
          "
        />
        <div id="msg-section" class="text-red-500 text-sm my-6">
          <%= messages.error %>
        </div>
      </div>
      <div id="overlay" style="display: none">
        <div
          id="image-upload-panel"
          class="w-full max-w-2xl rounded-md flex flex-col items-center justify-center"
        >
          <label class="text-2xl font-bold">Upload Image</label>
          <div
            class="bg-gray-200 shadow-inner rounded-md w-full my-6 cursor-pointer"
          >
            <div
              id="upload-container"
              class="flex flex-col items-center w-full h-full"
            >
              <img
                src="/img/upload-img.png"
                alt="upload-img"
                class="w-1/2 h-1/2 object-contain"
              />
              <label for="panelFileInput" class="mb-4 cursor-pointer">
                Drag and drop an image or click here to select an image:
                <input
                  type="file"
                  style="display: none"
                  id="panelFileInput"
                  accept="image/*"
                />
              </label>
            </div>
            <div
              id="preview"
              class="flex flex-col items-center w-full h-full"
            ></div>
          </div>
          <div class="w-full flex justify-end">
            <button
              id="cancelBtn"
              class="btn rounded-full text-white font-bold py-2 px-4 mx-3 rounded focus:outline-none focus:shadow-outline"
              type="button"
            >
              Cancel
            </button>
            <button
              id="confirmBtn"
              class="btn rounded-full text-white font-bold py-2 px-4 mx-3 rounded focus:outline-none focus:shadow-outline"
              type="button"
            >
              Confirm
            </button>
          </div>
        </div>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
          Staff ID
        </label>
        <input
          type="text"
          <%= staffObject ? 'readonly' : '' %>
          placeholder="Enter Staff ID"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="staff-id"
          name="staff-id"
          value="<%= staffObject ? staffObject.staff_id : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
          Name
        </label>
        <input
          type="text"
          placeholder="Enter Name"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="name"
          name="name"
          value="<%= staffObject ? staffObject.name : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="age">
          Age
        </label>
        <input
          type="number"
          placeholder="Enter Age"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="age"
          name="age"
          value="<%= staffObject ? staffObject.age : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="email">
          Email
        </label>
        <input
          type="email"
          placeholder="Enter Email"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="mail"
          name="email"
          value="<%= staffObject ? staffObject.mail : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="mobile">
          Mobile
        </label>
        <input
          type="tel"
          placeholder="Enter Mobile Number"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="mobile"
          name="mobile"
          value="<%= staffObject ? staffObject.mobile : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label
          class="block text-gray-700 text-sm font-bold mb-2"
          for="identityType"
        >
          Identity Type
        </label>
        <input
          type="text"
          placeholder="Enter Identity Type"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="identityType"
          name="identityType"
          value="<%= staffObject ? staffObject.identitytype : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label
          class="block text-gray-700 text-sm font-bold mb-2"
          for="identityNumber"
        >
          Identity Number
        </label>
        <input
          type="text"
          placeholder="Enter Identity Number"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="identityNumber"
          name="identityNumber"
          value="<%= staffObject ? staffObject.identityno : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="address">
          Address
        </label>
        <input
          type="text"
          placeholder="Enter Address"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="address"
          name="address"
          value="<%= staffObject ? staffObject.address : '' %>"
          required
        />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="pincode">
          Pincode
        </label>
        <input
          type="text"
          placeholder="Enter Pincode"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          id="pincode"
          name="pincode"
          value="<%= staffObject ? staffObject.pincode : '' %>"
          required
        />
      </div>

      <% if(!staffObject) { %>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="pincode">
              Password
            </label>
            <input
              type="text"
              placeholder="Enter password"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="password"
              name="password"
              value="<%= staffObject ? staffObject.password : '' %>"
              required
            />
          </div>
          <% } %>

      <% if(staffObject){ %>
      <div class="flex items-center justify-between">
        <a href="/admin/deletestaff/<%= staffObject.staff_id %>">
          <button
            type="button"
            class="btn rounded-full text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            Delete
          </button>
        </a>
        <button
          id="addBtn"
          class="btn rounded-full text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="button"
        >
          Update
        </button>
      </div>
      <% } else { %>
      <div class="flex items-center justify-end">
        <button
          id="addBtn"
          class="btn rounded-full text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="button"
        >
          Add
        </button>
      </div>
      <% } %>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<!-- Include jQuery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
/>
<script>
  // Get elements
  const profileImage = document.getElementById("profile-img");
  const panel = document.getElementById("image-upload-panel");
  const overlay = document.getElementById("overlay");
  const panelFileInput = document.getElementById("panelFileInput");
  const uploadContainer = document.getElementById("upload-container");
  const msgSection = document.getElementById("msg-section");
  const preview = document.getElementById("preview");
  let image_name = profileImage.src.split("/").pop();
  console.log("imgName ",image_name)
  let flag = false;
  let cropper;

  // Add button fuctionality
  document.getElementById("addBtn").addEventListener("click", async () => {
    const staff_id = document.getElementById("staff-id").value.trim();
    const name = document.getElementById("name").value.trim();
    const age = document.getElementById("age").value.trim();
    const mail = document.getElementById("mail").value.trim();
    const mobile = document.getElementById("mobile").value.trim();
    const identity = document.getElementById("identityType").value.trim();
    const identityno = document.getElementById("identityNumber").value.trim();
    const address = document.getElementById("address").value.trim();
    const pincode = document.getElementById("pincode").value.trim();
    const passwordDiv = document.getElementById("password");
    const password = passwordDiv ? passwordDiv.value : "";
    console.log(staff_id)


    if (!staff_id || !name || !age || !mail || !mobile || !identity || !identityno || !address || !pincode || (passwordDiv && !password)) {
      alert("Fill all the fields to proceed.");
    } else {
      if (!passwordDiv) {
        // If passwordDiv doesn't exists exists, make a PATCH request
        try {
          const response = await axios.patch(`/admin/staff/${staff_id}`, {
          image_name: flag ? image_name : null,
          name,
          age,
          mail,
          mobile,
          identity,
          identityno,
          address,
          pincode,
        });
          console.log("Patch Request Successful.");
        } catch (error) {
          console.error("Error making PATCH request:", error);
        }
      } else {
        // If passwordDiv exists, make a POST request
        try {
          const response = await axios.post("/admin/staff", {
          staff_id,
          image_name: flag ? image_name : null,
          name,
          age,
          mail,
          mobile,
          identity,
          identityno,
          address,
          pincode,
          password
        });
          console.log("POST Request Successful");
          console.log(response.data);
          window.location.reload();
        } catch (error) {
          console.error("Error making POST request:", error);
        }
      }
    }
  });

  // Show panel when profileImage is clicked
  profileImage.addEventListener("click", function () {
    overlay.style.display = "block";
    uploadContainer.classList.remove("hidden");
    preview.classList.add("hidden");
  });

  uploadContainer.addEventListener("click", function () {
    document.getElementById("panelFileInput").click();
  });

  // Hide panel when clicking outside of it
  document.addEventListener("click", function (event) {
    if (!panel.contains(event.target) && !profileImage.contains(event.target)) {
      overlay.style.display = "none";
      panelFileInput.value = "";
      preview.innerHTML = "";
    }
  });

  // Handle file selection
  panelFileInput.addEventListener("change", function (event) {
    const file = event.target.files[0];
    if (file && file.size <= 500 * 1024) {
      const reader = new FileReader();
      reader.onload = function (e) {
        // const blob = new Blob([e.target.result], { type: file.type });
        const image = new Image();
        image.src = URL.createObjectURL(
          new Blob([e.target.result], { type: file.type })
        );
        image.onload = function () {
          cropper = new Cropper(image, {
            aspectRatio: 1 / 1, // Set the aspect ratio of the crop box
            viewMode: 2, // Set the view mode to restrict the size of the crop box
          });
        };
        uploadContainer.classList.add("hidden");
        preview.classList.remove("hidden");
        preview.appendChild(image);
      };
      reader.readAsArrayBuffer(file);
    } else {
      alert("Please select an image less than 500KB.");
      panelFileInput.value = "";
    }
  });

  // Prevent default behavior for drag-and-drop events
  document.addEventListener("dragover", function (e) {
    e.preventDefault();
  });
  document.addEventListener("drop", function (e) {
    e.preventDefault();
  });

  document.getElementById("confirmBtn").addEventListener("click", async function () {
      // Create an image element for the cropped image
      if (cropper && panelFileInput.value) {
        // Hide the cropper and show the cropped image
        overlay.style.display = "none";
        panelFileInput.value = "";
        preview.innerHTML = "";

        try {
          msgSection.innerHTML = ` Uploading... <span><progress id="progressBar" value="0" max="100"></progress></span> <span id="percentage">0 %</span><span id="uploadCancelBtn"><img src="/img/cross.png"></span>`;

          const addBtn = document.getElementById("addBtn");
          const progressBar = document.getElementById("progressBar");
          const percentageSpan = document.getElementById("percentage");
          const cancelBtn = document.getElementById("uploadCancelBtn");
          let uploadCancelToken = axios.CancelToken.source();

          addBtn.classList.add("disabled");
          addBtn.classList.remove("btn");
          addBtn.disabled = true;

          cancelBtn.addEventListener("click", () => {
            uploadCancelToken.cancel("Upload canceled by user");
            msgSectioninnerHTML = "";
            throw new Error({ message: "Upload Cancelled." });
          });

          const blob = await new Promise((resolve, reject) => {
            cropper.getCroppedCanvas().toBlob((blob) => {
              resolve(blob);
            });
          });
          profileImage.src = await URL.createObjectURL(blob);

          // const imgBlob = profileImage.src;
          const formData = new FormData();
          formData.append("image", blob, image_name);

          const response = await axios.post(
            `/admin/upload-staffProfile-img`,
            formData,
            {
              headers: {
                "Content-Type": "multipart/form-data",
              },
              // Configuring axios to listen to upload progress
              onUploadProgress: (progressEvent) => {
                const progress = Math.round(
                  (progressEvent.loaded / progressEvent.total) * 100
                );
                // Update the progress bar
                progressBar.value = progress;
                percentageSpan.innerText = `${progress} %`;
              },
              cancelToken: uploadCancelToken.token,
            }
          );
          console.log("image uploaded successfully.");
          image_name = response.data.image_name;
          flag = true;

          console.log("flag ",flag)
          console.log(image_name)

          // cropper.destroy();
          addBtn.classList.remove("disabled");
          addBtn.classList.add("btn");
          addBtn.disabled = false;
          msgSection.innerHTML = "";
        } catch (error) {
          if (axios.isCancel(error)) {
            // Handle cancelation
            console.log("Upload canceled by user");
            // parse error message and show it in msg-section
            msgSection.innerHTML = error.message;
            addBtn.classList.remove("disabled");
            addBtn.classList.add("btn");
            addBtn.disabled = false;
          } else {
            // Handle other errors
            console.error("Error:", error.message);
            // parse error message and show it in msg-section
            msgSection.innerHTML = "Failed to upload Image.";
            addBtn.classList.remove("disabled");
            addBtn.classList.add("btn");
            addBtn.disabled = false;
          }
        }
      } else {
        alert("Please select a image.");
      }
    });

  document.getElementById("cancelBtn").addEventListener("click", () => {
    overlay.style.display = "none";
    panelFileInput.value = "";
    preview.innerHTML = "";
  });
</script>